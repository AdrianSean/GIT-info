[Create a new  GIT repo]
git init

[add entry to config file]
git config user.name "Adrian Gurnett"

[remove entry from config file]
git confg --unset user.name

[display key/value settings of config file]
cat .git/config

[List the settings for the config file at different levels]
git config --global --list (local config file - applies to all repos)
git config --local --list (local user config file, applies to all repos, overwrites global)
git config .git/config (local repo config file, overwrites local)

[open config in a spefic editor i.e.: Visual Studio Code]
Code .git/config  

[Add all new files to the repo - ready to be staged for next commit]
git add -A

[Add specific files to the repo - ready to be staged for next commit]
git add "MyFile.txt"

[Commit the changes]
git commit -m "My commit message"

[Get latest status on the repo]
git status

[Delete a file]
rm MyFile.txt 

[Stage the delete for the next commit, this tracks changes to existing known files by GIT]
git add -u

[Rename a file]
mv MyFile.txt My_New_File_Name.txt

[View the log of commits, type q to escape]
git log
git log --oneline (more condensed view)

[Edited a file but want to revert changes]
git checkout MyFile.txt

[List the contents of folder]
ls -la

[remove a commit from the repo & also any staged changes]
git reset --hard

[remove a commit from the repo but leave the changes in the staging area]
git reset --soft HEAD~1

[Clean a directory, removes any temp files perhaps generated automatically, untracked files, etc]
git clean -n  (tells you what files it will be removing)
git clean -f  (does the actual removal)

[Ignore files to be commited to repo]
# create a .gitignore file in root of repo
# add list of files to ignore in it 
   i.e.: /foldername/*.fileextension
# add(stage) & commit this .gitignore file to repo





/*** WORKING WITH REMOTE REPOS, TAGS & MERGING ***/

[Clone a remote repo]
git clone URL

[list urls for the origin repo if cloned]
git remote -v

[Get latest from remote repo, only updates the remote repo (origin/master)]
git fetch

[Merge changes from remote repo into local repo]
git merge

[get latest from remote repo and merge into local repo in one go -- same as doing: git-fetch; git-merge]
git pull

[update the remote repo with commits done in local repo]
git push

[list branches setup in the repo]
git branch
git branch -r (list remote branches)

[list tags in the repo]
git tag

[make a tag locally]
git tag MyTagName

[add local tag(s) to remote repo]
git push --tags


    



